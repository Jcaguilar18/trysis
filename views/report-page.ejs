<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Inventory Final Report</title>
    <style>
      body {
        font-family: 'Arial', sans-serif;
        padding: 20px;
      }
      .report-title {
        text-align: center;
        margin-bottom: 20px;
      }
      .report-table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 20px;
      }
      .report-table, .report-table th, .report-table td {
        border: 1px solid #ddd;
      }
      .report-table th, .report-table td {
        padding: 8px;
        text-align: left;
      }
      .report-table th {
        background-color: #f2f2f2;
      }
      .report-section {
        page-break-after: always; /* Ensure each section is printed on a new page */
      }
      .report-footer {
        text-align: center;
        margin-top: 40px;
        font-size: 0.9em;
      }
      .print-button {
        background-color: #4CAF50;
        color: white;
        padding: 10px 20px;
        border: none;
        cursor: pointer;
        text-align: center;
        display: inline-block;
        font-size: 16px;
        margin: 20px auto;
        display: block;
      }
      .signature-block {
        text-align: center;
        margin-top: 60px;
      }
      .prepared-by {
        margin-top: 20px; /* Increased space below 'Prepared by:' */
        display: block;
      }
      .prepared-by-section {
        display: flex;
        justify-content: space-between;
        align-items: flex-end;
        margin-top: 60px;
      }
      .signature-line {
        width: 200px; /* Adjust width as needed */
        border-top: 1px solid black;
        margin: 20px auto 0; /* Center the line */
      }
      .signature {
        text-align: center;
        width: 200px;
      }
      .role {
        font-size: 0.8em;
        font-style: italic;
        display: block;
        margin-top: 2px;
      }
      .prepared-by-label {
        margin-bottom: 50px; /* Adjust as needed */
      }
      .name-role {
        text-align: center;
        display: block;
        margin-top: 10px;
        margin-bottom: 0px;
      }
      @media print {
        body {
          counter-reset: page;
        }
        .report-footer::after {
          content: "Page " counter(page) " of " counter(pages);
          counter-increment: page;
          display: block;
          text-align: right;
          padding-top: 20px;
        }
        .report-container::after {
          counter-reset: pages;
          content: '';
          display: block;
          page-break-after: always;
        }
        h2 {
          page-break-before: always; /* Ensures each classification starts on a new page */
        }
        h2:first-of-type {
          page-break-before: auto; /* Prevents a page break before the first element */
        }
      }
    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.9.2/html2pdf.bundle.min.js"></script>
</head>
<body>
    <div id="report">
      <div class="report-title">
        <h1>Inventory Final Report</h1>
        <p id="generatedOn"></p>
          <p>Report Period: <%= start %> - <%= marker %></p>
      </div>
      
      <% const classifications = { '1': 'Fabrication', '2': 'Firepro', '3': 'Electrical' }; %>
      <% let pageNumber = 1; %>
      <% let totalSections = Object.keys(classifications).length; %>
      <%totalSections++ %>
      <% Object.keys(classifications).forEach(function(classificationId) { %>
        <% const filteredItems = reportData.filter(item => item.classification_id.toString() === classificationId); %>
        <% if (filteredItems.length > 0) { %>
          <div class="report-section">
          
          <h2><%= classifications[classificationId] %></h2>
          <table class="report-table">
            <thead>
              <tr>
                <th>Cluster Code</th>
                <th>Description</th>
                <th>Total Amount</th>
              </tr>
            </thead>
            <tbody>
              <% filteredItems.forEach(function(item) { %>
                <tr>
                  <td><%= item.clustercode %></td>
                  <td><%= item.description %></td>
                  <td>₱<%= item.total_amount.toFixed(2) %></td>
                </tr>
              <% }); %>
            </tbody>
          </table>
          <div class="report-footer">
            <div class="signature-block">
              <div class="prepared-by-label">Prepared by:</div>
              <div class="signature-line"></div>
              <div class="name-role">
                <%= currentUser %>
                <div class="role"><%= currentRole %></div>
              </div>
              <div class="page-number">Page <%= pageNumber++ %> of <%= totalSections %></div>
            </div>
          </div>
        </div>
        <% } %>
      <% }); %>

      <div class="summary-section">
        <h2>Summary Report</h2>
        <table class="report-table">
          <thead>
            <tr>
              <th>Classification</th>
              <th>Subtotal</th>
            </tr>
          </thead>
          <tbody>
            <% Object.keys(subtotals).forEach(function(classificationId) { %>
              <tr>
                <td><%= classificationId === '1' ? 'Fabrication' : classificationId === '2' ? 'Firepro' : 'Electrical' %></td>
                <td>₱<%= subtotals[classificationId].toFixed(2) %></td>
              </tr>
            <% }); %>
            <tr>
              <td><strong>Grand Total</strong></td>
              <td><strong>₱<%= grandTotal.toFixed(2) %></strong></td>
            </tr>
          </tbody>
        </table>
        <div class="report-footer">
          <div class="signature-block">
            <div class="prepared-by-label">Prepared by:</div>
            <div class="signature-line"></div>
            <div class="name-role">
              <%= currentUser %>
              <div class="role"><%= currentRole %></div>  
            </div>
            <div class="page-number">Page <%= pageNumber++ %> of <%= totalSections %></div>
          </div>
        </div>
      </div>
    </div>
    <button type="button" class="print-button" onclick="downloadPDF();">Download PDF</button>
    <button onclick="downloadCSV();" class="print-button">Download CSV</button>

    <script>
       document.addEventListener('DOMContentLoaded', (event) => {
          const now = new Date();
          const options = { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: true };
          const formattedDateTime = now.toLocaleDateString('en-US', options);
          document.getElementById('generatedOn').textContent = 'Generated on: ' + formattedDateTime;

          // Page numbering logic
          const containers = document.querySelectorAll('.report-container');
          const totalPages = containers.length;
          containers.forEach((container, index) => {
            container.querySelector('.current-page').textContent = index + 1;
            container.querySelector('.total-pages').textContent = totalPages;
          });
      });
        function downloadPDF() {
          if (typeof html2pdf === 'undefined') {
            console.error('html2pdf library is not loaded!');
            return;
          }
          
          var element = document.getElementById('report');
          var opt = {
            margin:       [1, 0.5],
            filename:     'InventoryFinalReport.pdf',
            image:        { type: 'jpeg', quality: 0.98 },
            html2canvas:  { scale: 2 },
            jsPDF:        { unit: 'in', format: 'letter', orientation: 'portrait' }
          };
          
          // New Promise-based usage:
          html2pdf().set(opt).from(element).toPdf().get('pdf').then(function (pdfObj) {
            // This could be used for further manipulation of the PDF if needed.
          }).save();
        }

        
        function downloadCSV() {
  let csvContent = "data:text/csv;charset=utf-8,";
  csvContent += "Classification,Cluster Code,Description,Total Amount\n";

  // Function to parse text content from a row
  function parseRow(row) {
    const cells = row.querySelectorAll('td, th');
    return Array.from(cells).map(cell => `"${cell.innerText}"`).join(',');
  }

  // Process each classification table
  document.querySelectorAll('.report-container h2').forEach((header, index) => {
    const classification = header.innerText;
    const table = document.querySelectorAll('.report-container table')[index];
    const rows = table.querySelectorAll('tbody tr');

    rows.forEach(row => {
      csvContent += classification + "," + parseRow(row) + "\n";
    });
  });

  // Process summary table
  const summaryTable = document.querySelectorAll('.report-container table')[document.querySelectorAll('.report-container table').length - 1];
  const summaryRows = summaryTable.querySelectorAll('tbody tr');

  csvContent += "\nSummary Report\n";
  summaryRows.forEach(row => {
    csvContent += parseRow(row) + "\n";
  });

  // Encoding URI and creating download link
  const encodedUri = encodeURI(csvContent);
  const link = document.createElement("a");
  link.setAttribute("href", encodedUri);
  link.setAttribute("download", "inventory_report.csv");
  document.body.appendChild(link); // Required for Firefox
  link.click(); // Trigger the download
}

    </script>
</body>
</html>