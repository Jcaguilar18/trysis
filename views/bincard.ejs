<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Bin Cards</title>
  <style>
    body {
      font-family: 'Arial', sans-serif;
      padding: 20px;
    }
    .bin-card-container {
      page-break-after: always;
    }
    .bin-card-container:last-child {
      page-break-after: avoid;
    }
    .bin-card-title {
      text-align: center;
      margin-bottom: 20px;
    }
    .bin-card-table {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 20px;
    }
    .bin-card-table th,
    .bin-card-table td {
      border: 1px solid #ddd;
      padding: 8px;
      text-align: left;
    }
    .bin-card-table th {
      background-color: #f2f2f2;
    }
    .signature-block {
        text-align: center;
        margin-top: 60px;
        
      }
      .prepared-by {
        margin-top: 20px; /* Increased space below 'Prepared by:' */
        display: block;
      }
      .prepared-by-section {
        display: flex;
        justify-content: space-between;
        align-items: flex-end;
        margin-top: 60px;
      }
      .signature-line {
        width: 200px; /* Adjust width as needed */
        border-top: 1px solid black;
        margin: 20px auto 0; /* Center the line */
      }
      .signature {
        text-align: center;
        width: 200px;
      }
      .role {
        font-size: 0.8em;
        font-style: italic;
        display: block;
        margin-top: 2px;
      }
      .prepared-by-label {
        margin-bottom: 50px; /* Adjust as needed */
      }
      .name-role {
        text-align: center;
        display: block;
        margin-top: 10px;
        margin-bottom: 0px;
      }
    .print-button {
  background-color: #4CAF50;
  color: white;
  padding: 10px 20px;
  border: none;
  cursor: pointer;
  text-align: center;
  /* Set a max-width for the buttons */
  max-width: 200px; /* Adjust this value as needed */
  /* Auto margins to center the buttons */
  margin: 0 auto;
  display: block;
  /* Add some margin to the bottom of each button for spacing */
  margin-bottom: 10px;
}

  </style>
  <script>var bincards = <%- JSON.stringify(bincards) %>;</script>
  
   <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.9.2/html2pdf.bundle.min.js"></script>
</head>
<body>
  <div id="all-bins"> <!-- Wrapper for all bin-card-container elements -->
    <% Object.keys(bincards).forEach(function(clusterCode) { %>
      <div class="bin-card-container">
        <div class="bin-card-title">
          <h1>Inventory Bin Card</h1>
          <h2>Cluster Code: <%= clusterCode %></h2>
          <p id="generatedOn"></p>
        </div>
        <table class="bin-card-table">
          <thead>
            <tr>
              <th>Name of Material</th>
              <th>Description</th>
              <th>Beginning Inventory</th>
              <th>Total Incoming</th>
              <th>Total Outgoing</th>
              <th>Available</th>
              <th>Unit Price</th>
              <th>Total Value</th>
            </tr>
          </thead>
          <tbody>
            <% bincards[clusterCode].items.forEach(function(item) { %>
              <tr>
                <td><%= item.description %></td>
                <td><%= item.name %></td>
                <td><%= item.beginningInventory %></td>
                <td><%= item.totalIncoming %></td>
                <td><%= item.totalOutgoing %></td>
                <td><%= item.available %></td>
                <td>₱<%= item.unitPrice.toFixed(2) %></td>
                <td>₱<%= item.totalValue.toFixed(2) %></td>
              </tr>
            <% }); %>
          </tbody>
        </table>
        <div class="signature-block">
          <div class="prepared-by-label">Prepared by:</div>
          <div class="signature-line"></div>
          <div class="name-role">
            <%= currentUser %>
            <div class="role"><%= currentRole %></div>
          </div>
        </div>
        <footer>
          
        </footer>
      </div>
    <% }); %>
  </div>
  <button onclick="window.downloadPDF();" class="print-button">Print Bin Cards</button>
  <button onclick="downloadCSV();" class="print-button">Download Bin Cards as CSV</button>

  <script>
    function downloadPDF() {
      if (typeof html2pdf === 'undefined') {
        console.error('html2pdf library is not loaded!');
        return;
      }
      
      var element = document.getElementById('all-bins'); // Now targeting the wrapper
      var opt = {
        margin:       [1, 0.5],
        filename:     'InventoryFinalReport.pdf',
        image:        { type: 'jpeg', quality: 0.98 },
        html2canvas:  { scale: 2 },
        jsPDF:        { unit: 'in', format: 'letter', orientation: 'portrait' }
      };
      
      html2pdf().set(opt).from(element).toPdf().get('pdf').then(function (pdfObj) {
        // Optional: further manipulation of the PDF
      }).save();
    }
    function downloadCSV() {
    let csvContent = "data:text/csv;charset=utf-8,";
    // Adding the header row
    csvContent += "Cluster Code,Name of Material,Description,Beginning Inventory,Total Incoming,Total Outgoing,Available,Unit Price,Total Value\n";
    
    // Assuming 'bincards' is accessible and has the necessary structure
    Object.keys(bincards).forEach(clusterCode => {
      bincards[clusterCode].items.forEach(item => {
        const row = `${clusterCode},${item.name},${item.description},${item.beginningInventory},${item.totalIncoming},${item.totalOutgoing},${item.available},"₱${item.unitPrice.toFixed(2)}","₱${item.totalValue.toFixed(2)}"`;
        csvContent += row + "\n";
      });
    });

    // Creating a link to trigger the download
    const encodedUri = encodeURI(csvContent);
    const link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", "bin_cards_data.csv");
    document.body.appendChild(link); // Required for Firefox
    link.click(); // This will download the data file named "bin_cards_data.csv".
  }

  document.addEventListener('DOMContentLoaded', (event) => {
    // Create a new Date object for the current date and time
    const now = new Date();
    // Format the date and time. Adjust the format as needed
    const options = { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: true };
    const formattedDateTime = now.toLocaleDateString('en-US', options);
    // Set the text content of the 'generatedOn' element
    document.getElementById('generatedOn').textContent = 'Generated on: ' + formattedDateTime;
});

  </script>
</body>
</html>
